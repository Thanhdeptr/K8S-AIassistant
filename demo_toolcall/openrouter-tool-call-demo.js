const fetch = require('node-fetch');

// C·∫•u h√¨nh
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || 'your-api-key-here';
const MODEL = 'openai/gpt-oss-20b:free';
const API_URL = 'https://openrouter.ai/api/v1/chat/completions';

// ƒê·ªãnh nghƒ©a tools
const tools = [
    {
        type: "function",
        function: {
            name: "get_weather",
            description: "L·∫•y th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o 5 ng√†y cho m·ªôt ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ",
            parameters: {
                type: "object",
                properties: {
                    location: {
                        type: "string",
                        description: "T√™n th√†nh ph·ªë, m√£ b∆∞u ƒëi·ªán ho·∫∑c t·ªça ƒë·ªô (lat,lng). V√≠ d·ª•: 'Hanoi', '10000', '21.0285,105.8542'"
                    },
                    units: {
                        type: "string",
                        enum: ["celsius", "fahrenheit"],
                        description: "ƒê∆°n v·ªã nhi·ªát ƒë·ªô",
                        default: "celsius"
                    }
                },
                required: ["location"]
            }
        }
    },
    {
        type: "function",
        function: {
            name: "calculate",
            description: "Th·ª±c hi·ªán c√°c ph√©p t√≠nh to√°n h·ªçc c∆° b·∫£n",
            parameters: {
                type: "object",
                properties: {
                    expression: {
                        type: "string",
                        description: "Bi·ªÉu th·ª©c to√°n h·ªçc c·∫ßn t√≠nh. V√≠ d·ª•: '2 + 3 * 4', 'sqrt(16)', 'sin(90)'"
                    }
                },
                required: ["expression"]
            }
        }
    }
];

// Mock function ƒë·ªÉ th·ª±c thi tools
async function executeTool(toolCall) {
    const { name, arguments: args } = toolCall.function;
    const parsedArgs = JSON.parse(args);

    console.log(`üîß Th·ª±c thi tool: ${name} v·ªõi arguments:`, parsedArgs);

    switch (name) {
        case 'get_weather':
            return await mockGetWeather(parsedArgs.location, parsedArgs.units);
        case 'calculate':
            return await mockCalculate(parsedArgs.expression);
        default:
            return { error: `Tool ${name} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£` };
    }
}

// Mock weather API
async function mockGetWeather(location, units = 'celsius') {
    // Gi·∫£ l·∫≠p delay network
    await new Promise(resolve => setTimeout(resolve, 1000));

    const temperature = Math.floor(Math.random() * 30) + 10;
    const humidity = Math.floor(Math.random() * 40) + 40;

    return {
        location: location,
        current: {
            temperature: temperature,
            unit: units,
            humidity: humidity,
            condition: "Partly Cloudy",
            description: `Th·ªùi ti·∫øt ${location}: ${temperature}¬∞${units === 'celsius' ? 'C' : 'F'}, ƒë·ªô ·∫©m ${humidity}%`
        },
        forecast: [
            { day: "H√¥m nay", temp: temperature, condition: "Partly Cloudy" },
            { day: "Ng√†y mai", temp: temperature + 2, condition: "Sunny" },
            { day: "Ng√†y kia", temp: temperature - 1, condition: "Cloudy" }
        ]
    };
}

// Mock calculator
async function mockCalculate(expression) {
    await new Promise(resolve => setTimeout(resolve, 500));

    try {
        // Ch·ªâ cho ph√©p c√°c ph√©p t√≠nh an to√†n
        const safeExpression = expression.replace(/[^0-9+\-*/().,]/g, '');
        const result = eval(safeExpression);
        return {
            expression: expression,
            result: result,
            calculation: `${expression} = ${result}`
        };
    } catch (error) {
        return {
            error: `Kh√¥ng th·ªÉ t√≠nh to√°n: ${expression}`,
            reason: error.message
        };
    }
}

// H√†m ch√≠nh ƒë·ªÉ g·ªçi OpenRouter API
async function callOpenRouter(messages, tools = null) {
    const requestBody = {
        model: MODEL,
        messages: messages,
        temperature: 0.7,
        max_tokens: 1000
    };

    if (tools) {
        requestBody.tools = tools;
    }

    try {
        const response = await fetch(API_URL, {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${OPENROUTER_API_KEY}`,
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://github.com/your-repo/demo', // Optional
                'X-Title': 'OpenRouter Tool Call Demo' // Optional
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`API Error: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('‚ùå L·ªói khi g·ªçi OpenRouter API:', error.message);
        throw error;
    }
}

// H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω tool calling
async function handleToolCalling(userMessage) {
    console.log('ü§ñ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω tool calling...\n');

    const messages = [
        {
            role: 'user',
            content: userMessage
        }
    ];

    try {
        // B∆∞·ªõc 1: G·ª≠i request v·ªõi tools
        console.log('üì§ B∆∞·ªõc 1: G·ª≠i request v·ªõi tools...');
        const response1 = await callOpenRouter(messages, tools);

        const assistantMessage = response1.choices[0].message;
        console.log('ü§ñ Assistant response:', assistantMessage.content || 'Tool calls ƒë∆∞·ª£c y√™u c·∫ßu');

        // Ki·ªÉm tra xem c√≥ tool calls kh√¥ng
        if (!assistantMessage.tool_calls || assistantMessage.tool_calls.length === 0) {
            console.log('‚úÖ Kh√¥ng c√≥ tool calls, tr·∫£ v·ªÅ response tr·ª±c ti·∫øp');
            return assistantMessage.content;
        }

        // B∆∞·ªõc 2: Th·ª±c thi c√°c tools
        console.log('\nüîß B∆∞·ªõc 2: Th·ª±c thi tools...');
        const toolResults = [];

        for (const toolCall of assistantMessage.tool_calls) {
            const result = await executeTool(toolCall);
            toolResults.push({
                role: 'tool',
                tool_call_id: toolCall.id,
                name: toolCall.function.name,
                content: JSON.stringify(result, null, 2)
            });
        }

        // B∆∞·ªõc 3: G·ª≠i k·∫øt qu·∫£ tools v·ªÅ
        console.log('\nüì§ B∆∞·ªõc 3: G·ª≠i k·∫øt qu·∫£ tools v·ªÅ...');
        const finalMessages = [
            ...messages,
            assistantMessage,
            ...toolResults
        ];

        const response2 = await callOpenRouter(finalMessages, tools);
        const finalResponse = response2.choices[0].message;

        console.log('\n‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:');
        return finalResponse.content;

    } catch (error) {
        console.error('‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:', error.message);
        throw error;
    }
}

// Demo function
async function runDemo() {
    console.log('üöÄ Demo OpenRouter Tool Calling v·ªõi GPT-OSS-20B (Free)\n');

    if (OPENROUTER_API_KEY === 'your-api-key-here') {
        console.log('‚ùå Vui l√≤ng set OPENROUTER_API_KEY environment variable');
        console.log('   Ho·∫∑c t·∫°o file .env v·ªõi n·ªôi dung: OPENROUTER_API_KEY=your-key-here');
        return;
    }

    const demos = [
        "Th·ªùi ti·∫øt ·ªü H√† N·ªôi h√¥m nay nh∆∞ th·∫ø n√†o?",
        "T√≠nh to√°n: (15 + 25) * 2 / 5",
        "Cho t√¥i bi·∫øt th·ªùi ti·∫øt ·ªü TP.HCM v√† t√≠nh 100 + 200"
    ];

    for (let i = 0; i < demos.length; i++) {
        console.log(`\n${'='.repeat(60)}`);
        console.log(`üìù Demo ${i + 1}: ${demos[i]}`);
        console.log(`${'='.repeat(60)}`);

        try {
            const result = await handleToolCalling(demos[i]);
            console.log(`\nüí¨ K·∫øt qu·∫£: ${result}`);
        } catch (error) {
            console.log(`‚ùå L·ªói: ${error.message}`);
        }

        // Delay gi·ªØa c√°c demo
        if (i < demos.length - 1) {
            console.log('\n‚è≥ Ch·ªù 3 gi√¢y tr∆∞·ªõc demo ti·∫øp theo...');
            await new Promise(resolve => setTimeout(resolve, 3000));
        }
    }

    console.log('\nüéâ Demo ho√†n th√†nh!');
}

// Interactive mode
async function interactiveMode() {
    console.log('üöÄ Interactive Mode - OpenRouter Tool Calling Demo\n');
    console.log('Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (ho·∫∑c "quit" ƒë·ªÉ tho√°t):\n');

    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    const askQuestion = () => {
        rl.question('> ', async (input) => {
            if (input.toLowerCase() === 'quit') {
                console.log('üëã T·∫°m bi·ªát!');
                rl.close();
                return;
            }

            try {
                const result = await handleToolCalling(input);
                console.log(`\nüí¨ K·∫øt qu·∫£: ${result}\n`);
            } catch (error) {
                console.log(`‚ùå L·ªói: ${error.message}\n`);
            }

            askQuestion();
        });
    };

    askQuestion();
}

// Main execution
if (require.main === module) {
    const args = process.argv.slice(2);

    if (args.includes('--interactive') || args.includes('-i')) {
        interactiveMode();
    } else {
        runDemo();
    }
}

module.exports = {
    handleToolCalling,
    callOpenRouter,
    executeTool
};
