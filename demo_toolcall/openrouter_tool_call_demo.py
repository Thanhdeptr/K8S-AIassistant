#!/usr/bin/env python3
"""
OpenRouter Tool Calling Demo v·ªõi GPT-OSS-20B (Free)
Python version
"""

import os
import json
import asyncio
import aiohttp
import random
import time
from typing import Dict, List, Any, Optional

# C·∫•u h√¨nh
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', 'your-api-key-here')
MODEL = 'openai/gpt-oss-20b:free'
API_URL = 'https://openrouter.ai/api/v1/chat/completions'

# ƒê·ªãnh nghƒ©a tools
TOOLS = [
    {
        "type": "function",
        "function": {
            "name": "get_weather",
            "description": "L·∫•y th√¥ng tin th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o 5 ng√†y cho m·ªôt ƒë·ªãa ƒëi·ªÉm c·ª• th·ªÉ",
            "parameters": {
                "type": "object",
                "properties": {
                    "location": {
                        "type": "string",
                        "description": "T√™n th√†nh ph·ªë, m√£ b∆∞u ƒëi·ªán ho·∫∑c t·ªça ƒë·ªô (lat,lng). V√≠ d·ª•: 'Hanoi', '10000', '21.0285,105.8542'"
                    },
                    "units": {
                        "type": "string",
                        "enum": ["celsius", "fahrenheit"],
                        "description": "ƒê∆°n v·ªã nhi·ªát ƒë·ªô",
                        "default": "celsius"
                    }
                },
                "required": ["location"]
            }
        }
    },
    {
        "type": "function",
        "function": {
            "name": "calculate",
            "description": "Th·ª±c hi·ªán c√°c ph√©p t√≠nh to√°n h·ªçc c∆° b·∫£n",
            "parameters": {
                "type": "object",
                "properties": {
                    "expression": {
                        "type": "string",
                        "description": "Bi·ªÉu th·ª©c to√°n h·ªçc c·∫ßn t√≠nh. V√≠ d·ª•: '2 + 3 * 4', 'sqrt(16)', 'sin(90)'"
                    }
                },
                "required": ["expression"]
            }
        }
    }
]


class OpenRouterToolCallDemo:
    def __init__(self):
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def call_openrouter(self, messages: List[Dict], tools: Optional[List[Dict]] = None) -> Dict:
        """G·ªçi OpenRouter API"""
        request_body = {
            "model": MODEL,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1000
        }
        
        if tools:
            request_body["tools"] = tools
        
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/your-repo/demo",
            "X-Title": "OpenRouter Tool Call Demo"
        }
        
        try:
            async with self.session.post(API_URL, json=request_body, headers=headers) as response:
                if not response.ok:
                    error_text = await response.text()
                    raise Exception(f"API Error: {response.status} - {error_text}")
                
                return await response.json()
        except Exception as e:
            print(f"‚ùå L·ªói khi g·ªçi OpenRouter API: {e}")
            raise
    
    async def mock_get_weather(self, location: str, units: str = "celsius") -> Dict:
        """Mock weather API"""
        await asyncio.sleep(1)  # Gi·∫£ l·∫≠p delay network
        
        temperature = random.randint(10, 40)
        humidity = random.randint(40, 80)
        
        return {
            "location": location,
            "current": {
                "temperature": temperature,
                "unit": units,
                "humidity": humidity,
                "condition": "Partly Cloudy",
                "description": f"Th·ªùi ti·∫øt {location}: {temperature}¬∞{'C' if units == 'celsius' else 'F'}, ƒë·ªô ·∫©m {humidity}%"
            },
            "forecast": [
                {"day": "H√¥m nay", "temp": temperature, "condition": "Partly Cloudy"},
                {"day": "Ng√†y mai", "temp": temperature + 2, "condition": "Sunny"},
                {"day": "Ng√†y kia", "temp": temperature - 1, "condition": "Cloudy"}
            ]
        }
    
    async def mock_calculate(self, expression: str) -> Dict:
        """Mock calculator"""
        await asyncio.sleep(0.5)
        
        try:
            # Ch·ªâ cho ph√©p c√°c ph√©p t√≠nh an to√†n
            safe_expression = ''.join(c for c in expression if c.isdigit() or c in '+-*/().,')
            result = eval(safe_expression)
            return {
                "expression": expression,
                "result": result,
                "calculation": f"{expression} = {result}"
            }
        except Exception as e:
            return {
                "error": f"Kh√¥ng th·ªÉ t√≠nh to√°n: {expression}",
                "reason": str(e)
            }
    
    async def execute_tool(self, tool_call: Dict) -> Dict:
        """Th·ª±c thi tool"""
        name = tool_call["function"]["name"]
        args = json.loads(tool_call["function"]["arguments"])
        
        print(f"üîß Th·ª±c thi tool: {name} v·ªõi arguments: {args}")
        
        if name == "get_weather":
            return await self.mock_get_weather(args["location"], args.get("units", "celsius"))
        elif name == "calculate":
            return await self.mock_calculate(args["expression"])
        else:
            return {"error": f"Tool {name} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£"}
    
    async def handle_tool_calling(self, user_message: str) -> str:
        """X·ª≠ l√Ω tool calling"""
        print("ü§ñ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω tool calling...\n")
        
        messages = [
            {
                "role": "user",
                "content": user_message
            }
        ]
        
        try:
            # B∆∞·ªõc 1: G·ª≠i request v·ªõi tools
            print("üì§ B∆∞·ªõc 1: G·ª≠i request v·ªõi tools...")
            response1 = await self.call_openrouter(messages, TOOLS)
            
            assistant_message = response1["choices"][0]["message"]
            print(f"ü§ñ Assistant response: {assistant_message.get('content', 'Tool calls ƒë∆∞·ª£c y√™u c·∫ßu')}")
            
            # Ki·ªÉm tra xem c√≥ tool calls kh√¥ng
            if not assistant_message.get("tool_calls"):
                print("‚úÖ Kh√¥ng c√≥ tool calls, tr·∫£ v·ªÅ response tr·ª±c ti·∫øp")
                return assistant_message.get("content", "")
            
            # B∆∞·ªõc 2: Th·ª±c thi c√°c tools
            print("\nüîß B∆∞·ªõc 2: Th·ª±c thi tools...")
            tool_results = []
            
            for tool_call in assistant_message["tool_calls"]:
                result = await self.execute_tool(tool_call)
                tool_results.append({
                    "role": "tool",
                    "tool_call_id": tool_call["id"],
                    "name": tool_call["function"]["name"],
                    "content": json.dumps(result, ensure_ascii=False, indent=2)
                })
            
            # B∆∞·ªõc 3: G·ª≠i k·∫øt qu·∫£ tools v·ªÅ
            print("\nüì§ B∆∞·ªõc 3: G·ª≠i k·∫øt qu·∫£ tools v·ªÅ...")
            final_messages = [
                *messages,
                assistant_message,
                *tool_results
            ]
            
            response2 = await self.call_openrouter(final_messages, TOOLS)
            final_response = response2["choices"][0]["message"]
            
            print("\n‚úÖ K·∫øt qu·∫£ cu·ªëi c√πng:")
            return final_response.get("content", "")
            
        except Exception as e:
            print(f"‚ùå L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
            raise
    
    async def run_demo(self):
        """Ch·∫°y demo mode"""
        print("üöÄ Demo OpenRouter Tool Calling v·ªõi GPT-OSS-20B (Free)\n")
        
        if OPENROUTER_API_KEY == "your-api-key-here":
            print("‚ùå Vui l√≤ng set OPENROUTER_API_KEY environment variable")
            print("   Ho·∫∑c t·∫°o file .env v·ªõi n·ªôi dung: OPENROUTER_API_KEY=your-key-here")
            return
        
        demos = [
            "Th·ªùi ti·∫øt ·ªü H√† N·ªôi h√¥m nay nh∆∞ th·∫ø n√†o?",
            "T√≠nh to√°n: (15 + 25) * 2 / 5",
            "Cho t√¥i bi·∫øt th·ªùi ti·∫øt ·ªü TP.HCM v√† t√≠nh 100 + 200"
        ]
        
        for i, demo in enumerate(demos):
            print(f"\n{'='*60}")
            print(f"üìù Demo {i+1}: {demo}")
            print(f"{'='*60}")
            
            try:
                result = await self.handle_tool_calling(demo)
                print(f"\nüí¨ K·∫øt qu·∫£: {result}")
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
            
            # Delay gi·ªØa c√°c demo
            if i < len(demos) - 1:
                print("\n‚è≥ Ch·ªù 3 gi√¢y tr∆∞·ªõc demo ti·∫øp theo...")
                await asyncio.sleep(3)
        
        print("\nüéâ Demo ho√†n th√†nh!")
    
    async def interactive_mode(self):
        """Ch·∫°y interactive mode"""
        print("üöÄ Interactive Mode - OpenRouter Tool Calling Demo\n")
        print("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (ho·∫∑c 'quit' ƒë·ªÉ tho√°t):\n")
        
        while True:
            try:
                user_input = input("> ").strip()
                
                if user_input.lower() == "quit":
                    print("üëã T·∫°m bi·ªát!")
                    break
                
                if not user_input:
                    continue
                
                result = await self.handle_tool_calling(user_input)
                print(f"\nüí¨ K·∫øt qu·∫£: {result}\n")
                
            except KeyboardInterrupt:
                print("\nüëã T·∫°m bi·ªát!")
                break
            except Exception as e:
                print(f"‚ùå L·ªói: {e}\n")


async def main():
    """Main function"""
    import sys
    
    args = sys.argv[1:]
    
    async with OpenRouterToolCallDemo() as demo:
        if "--interactive" in args or "-i" in args:
            await demo.interactive_mode()
        else:
            await demo.run_demo()


if __name__ == "__main__":
    asyncio.run(main())
