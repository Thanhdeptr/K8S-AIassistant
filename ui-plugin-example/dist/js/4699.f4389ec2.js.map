{"version":3,"file":"js/4699.f4389ec2.js","mappings":"6NAOA,MAAMA,EAAgB,CAAC,sBAAuB,+BAEjCC,EAAiBC,GACrBA,GAAMC,MAAMC,GAAMJ,EAAcK,SAASD,EAAEE,UAAUC,QAG9D,GACE,WAAMC,GAEJ,IACMC,KAAKC,OAAOC,QAAQ,sBAAsB,KAAQC,OACpDH,KAAKP,WAAaO,KAAKC,OAAOG,SAAS,qBAAsB,CAAEC,KAAM,KAAQF,MAEjF,CAAE,MAAOG,GAAI,CAGb,KAEO,WACH,OAAWN,KAAKC,OAEpB,CAAE,MAAOK,GAAI,CAGbN,KAAKO,sBAAwBP,KAAKP,QAAUO,KAAKQ,cACnD,EAEA,IAAAC,GACE,MAAO,CAAEhB,KAAM,KAAMc,oBAAqB,KAC5C,EAEAG,SAAU,KACL,QAAW,CAAEC,SAAU,kBAM1B,cAAAH,GACE,OAAOR,KAAKC,OAAOC,QAAQ,kBAAkB,KAAWU,QAC1D,EAEA,KAAAC,GACE,MAAMC,EAAUd,KAAKQ,gBAAgBd,MAAMqB,GAAOA,EAAGC,KAAO,KAAQC,QAEpE,OAAOH,GAASI,KAClB,EAEA,KAAAC,GACE,MAAML,EAAUd,KAAKQ,gBAAgBd,MAAMqB,GAAOA,EAAGC,KAAO,KAAQI,gBAEpE,OAAON,GAASI,KAClB,EAEA,SAAAG,GACE,MAAMP,EAAUd,KAAKQ,gBAAgBd,MAAMqB,GAAOA,EAAGC,KAAO,KAAQM,aAEpE,OAAOR,GAASI,KAClB,EAEA,KAAAK,GACE,MAAMT,EAAUd,KAAKQ,gBAAgBd,MAAMqB,GAAOA,EAAGC,KAAO,KAAQQ,QAGpE,OAAIV,GAASI,MACJJ,GAASI,MAGXlB,KAAKC,OAAOC,QAAQ,cAC7B,EAEA,UAAAuB,GACE,OAAKzB,KAAK0B,kBAUHlC,EAAcQ,KAAKP,MANjB,EAOX,EAEA,iBAAAiC,GAGE,OAAO1B,KAAKW,UAAYX,KAAKO,mBAC/B,GAGFoB,MAAO,CACLR,MAAO,CACL,OAAAS,CAAQC,GACFA,EACF7B,KAAK8B,eAAeD,GAEpB7B,KAAK+B,mBAET,EACAC,WAAW,GAEbX,UAAW,CACT,OAAAO,CAAQC,GACFA,EACF7B,KAAK8B,eAAeD,EAAK,QAEzB7B,KAAK+B,kBAAkB,OAE3B,EACAC,WAAW,GAEbT,MAAO,CACL,OAAAK,GACM5B,KAAKmB,OACPnB,KAAK8B,eAAe9B,KAAKmB,OAEvBnB,KAAKqB,WACPrB,KAAK8B,eAAe9B,KAAKqB,UAAW,QAEtCrB,KAAKiC,cACP,EACAD,WAAW,GAGbP,WAAY,CACV,OAAAG,CAAQC,GACN,GAAK7B,KAAK0B,mBAKNG,IAAQ7B,KAAKa,MAAO,CAEtB,MAAMqB,EAAelC,KAAKQ,gBAAgBd,MAAMqB,GAAOA,EAAGC,KAAO,KAAQC,QAEzE,GAAIiB,EACFA,EAAahB,MAAQ,MACrBgB,EAAaC,WACR,CACL,MAAMC,EAASpC,KAAKC,OAAOC,QAAQ,wBAAwB,KAAWU,SAChEyB,EAAMD,GAAQE,QAAQ,cAExBD,GACFrC,KAAKC,OAAOG,SAAS,oBAAqB,CACxCC,KAAM,KAAWO,QAASf,SAAU,CAAEC,KAAM,KAAQmB,OAASC,MAAO,MAAOqB,QAAS,KACnFC,MAAM1B,GAAYA,EAAQqB,QAEjC,CACF,CACF,EACAH,WAAW,GAEbnB,MAAO,CACL,OAAAe,GACE5B,KAAKiC,cACP,EACAD,WAAW,IAIf,OAAAS,GACEzC,KAAKiC,gBACL,SACF,EACAS,QAAS,CACP,cAAAZ,CAAeX,EAAOrB,EAAO,WAC3B,MAAM6C,GAAO,QAAcxB,EAAOnB,KAAKuB,MAAOzB,GAE9C,IAAK,MAAM8C,KAAQD,EACjBE,SAASC,KAAKC,MAAMC,YAAYJ,EAAMD,EAAKC,GAE/C,EAEA,iBAAAb,CAAkBjC,EAAO,WACvB,MAAM6C,GAAO,QAAc,aAAc3C,KAAKuB,MAAOzB,GAErD,IAAK,MAAM8C,KAAQD,EACjBE,SAASC,KAAKC,MAAME,eAAeL,EAEvC,EACA,YAAAX,GACE,MAAMa,EAAOD,SAASK,qBAAqB,QAAQ,GAC7CC,EAAW,iCACjB,IAAIC,EAAY,SAAUpD,KAAKuB,SAAW4B,IAE1C,GAAKnD,KAAKa,MACR,IACE,MAAMwC,EAAY,SAAQ,KAAwBrD,KAAKa,uBAEtB,SAA7BwC,GAAWC,cACbF,EAAY,GAAID,KAAcnD,KAAKa,eAAiBb,KAAKuB,SAEzD6B,EAAY,SAAUpD,KAAKuB,uCAC3BvB,KAAKC,OAAOG,SAAS,sBAAsC,SAAfJ,KAAKuB,OAErD,CAAE,MAAO,CAEXuB,EAAKS,UAAYH,CACnB,G,qEC5MJ,IAAII,GAAa,EAEV,SAASC,IACd,OAAOD,CACT,CAEO,SAASE,EAAWC,GACzB,MAAMC,EAAMD,EAAMzD,QAAQ,mBAAmB,KAAWU,QAAS,KAAQiD,SACnE3B,EAAeyB,EAAMzD,QAAQ,mBAAmB,KAAWU,QAAS,KAAQK,OAC5E6C,EAAOC,EAAalB,SAASmB,KAAKd,qBAAqB,SAE7D,GAAIY,EAAM,CACR,IAAIG,EAEwB,SAAxB/B,GAAchB,MAChB+C,EAAa,EAAQ,OACY,QAAxB/B,GAAchB,MACvB+C,EAAa,EAAQ,OACY,cAAxB/B,GAAchB,QACvB+C,EAAa,EAAQ,QAGvBH,EAAKI,KAAON,GAAK1C,OAAS+C,GAAcE,EACxCX,GAAa,CACf,CACF,CAEA,SAASY,IACP,MAAMN,EAAOC,EAAalB,SAASmB,KAAKd,qBAAqB,SAE7D,OAAOY,EAAOA,EAAKI,KAAO,EAC5B,CAEA,SAASH,EAAaM,GACpB,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CACrC,MAAMR,EAAOO,EAAMC,GAEnB,GAAIR,EAAKU,KAAK5E,SAAS,QACrB,OAAOkE,CAEX,CAGF,CAEA,MAAMK,EAAiBC,G,wECnChBK,MAAM,kB,0CAAX,QAA8B,MAA9B,E,eAVF,SACEC,OAAQ,CAAC,KACT,WAAAC,GACE3E,KAAKC,OAAO2E,OAAO,WAAY,CAAEC,MAAO,IAAIC,MAAM,uCAClD9E,KAAK+E,QAAQC,QAAQ,cACvB,G,eCHF,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAASC,KAEpE,G","sources":["webpack://ui-plugin-examples/./node_modules/@rancher/shell/mixins/brand.js","webpack://ui-plugin-examples/./node_modules/@rancher/shell/utils/favicon.js","webpack://ui-plugin-examples/./node_modules/@rancher/shell/pages/404.vue","webpack://ui-plugin-examples/./node_modules/@rancher/shell/pages/404.vue?1629"],"sourcesContent":["import { mapGetters } from 'vuex';\nimport { CATALOG, MANAGEMENT } from '@shell/config/types';\nimport { SETTING } from '@shell/config/settings';\nimport { createCssVars } from '@shell/utils/color';\nimport { setTitle } from '@shell/config/private-label';\nimport { setFavIcon, haveSetFavIcon } from '@shell/utils/favicon';\n\nconst cspAdaptorApp = ['rancher-csp-adapter', 'rancher-csp-billing-adapter'];\n\nexport const hasCspAdapter = (apps) => {\n  return apps?.find((a) => cspAdaptorApp.includes(a.metadata?.name));\n};\n\nexport default {\n  async fetch() {\n    // For the login page, the schemas won't be loaded - we don't need the apps in this case\n    try {\n      if (this.$store.getters['management/canList'](CATALOG.APP)) {\n        this.apps = await this.$store.dispatch('management/findAll', { type: CATALOG.APP });\n      }\n    } catch (e) {}\n\n    // Ensure we read the settings even when we are not authenticated\n    try {\n      // The favicon is implicitly dependent on the initial settings having already been fetched\n      if (!haveSetFavIcon()) {\n        setFavIcon(this.$store);\n      }\n    } catch (e) {}\n\n    // Setting this up front will remove `computed` churn, and we only care that we've initialised them\n    this.haveAppsAndSettings = !!this.apps && !!this.globalSettings;\n  },\n\n  data() {\n    return { apps: null, haveAppsAndSettings: null };\n  },\n\n  computed: {\n    ...mapGetters({ loggedIn: 'auth/loggedIn' }),\n\n    // added to fix https://github.com/rancher/dashboard/issues/10788\n    // because on logout the brand mixin is mounted, but then a management store reset happens\n    // since login view get loaded, another fetchInitialSettings get's done\n    // which in turn will populate again globalSettings\n    globalSettings() {\n      return this.$store.getters['management/all'](MANAGEMENT.SETTING);\n    },\n\n    brand() {\n      const setting = this.globalSettings?.find((gs) => gs.id === SETTING.BRAND);\n\n      return setting?.value;\n    },\n\n    color() {\n      const setting = this.globalSettings?.find((gs) => gs.id === SETTING.PRIMARY_COLOR);\n\n      return setting?.value;\n    },\n\n    linkColor() {\n      const setting = this.globalSettings?.find((gs) => gs.id === SETTING.LINK_COLOR);\n\n      return setting?.value;\n    },\n\n    theme() {\n      const setting = this.globalSettings?.find((gs) => gs.id === SETTING.THEME);\n\n      // This handles cases where the settings update after the page loads (like on log out)\n      if (setting?.value) {\n        return setting?.value;\n      }\n\n      return this.$store.getters['prefs/theme'];\n    },\n\n    cspAdapter() {\n      if (!this.canCalcCspAdapter) {\n        // We only have a watch on cspAdapter to kick off persisting the brand setting.\n        // So we need to ensure we don't return an undefined here... which would match the undefined gave if no csp app was found...\n        // .. and wouldn't kick off the watcher\n        return '';\n      }\n\n      // Note! this used to be `findBy(this.app)` however for that case we lost reactivity on the collection\n      // (computed fires before fetch, fetch happens and update apps, computed would not fire again - even with vue.set)\n      // So use `.find` in method instead\n      return hasCspAdapter(this.apps);\n    },\n\n    canCalcCspAdapter() {\n      // We need to take consider the loggedIn state, as the brand mixin is used in the logout page where we can be in a mixed state\n      // (things in store but user has no auth to make changes)\n      return this.loggedIn && this.haveAppsAndSettings;\n    }\n  },\n\n  watch: {\n    color: {\n      handler(neu) {\n        if (neu) {\n          this.setCustomColor(neu);\n        } else {\n          this.removeCustomColor();\n        }\n      },\n      immediate: true\n    },\n    linkColor: {\n      handler(neu) {\n        if (neu) {\n          this.setCustomColor(neu, 'link');\n        } else {\n          this.removeCustomColor('link');\n        }\n      },\n      immediate: true\n    },\n    theme: {\n      handler() {\n        if (this.color) {\n          this.setCustomColor(this.color);\n        }\n        if (this.linkColor) {\n          this.setCustomColor(this.linkColor, 'link');\n        }\n        this.setBodyClass();\n      },\n      immediate: true\n    },\n\n    cspAdapter: {\n      handler(neu) {\n        if (!this.canCalcCspAdapter) {\n          return;\n        }\n\n        // The brand setting will only get updated if...\n        if (neu && !this.brand) {\n          // 1) There should be a brand... but there's no brand setting\n          const brandSetting = this.globalSettings?.find((gs) => gs.id === SETTING.BRAND);\n\n          if (brandSetting) {\n            brandSetting.value = 'csp';\n            brandSetting.save();\n          } else {\n            const schema = this.$store.getters['management/schemaFor'](MANAGEMENT.SETTING);\n            const url = schema?.linkFor('collection');\n\n            if (url) {\n              this.$store.dispatch('management/create', {\n                type: MANAGEMENT.SETTING, metadata: { name: SETTING.BRAND }, value: 'csp', default: ''\n              }).then((setting) => setting.save());\n            }\n          }\n        }\n      },\n      immediate: true\n    },\n    brand: {\n      handler() {\n        this.setBodyClass();\n      },\n      immediate: true\n    }\n\n  },\n  mounted() {\n    this.setBodyClass();\n    setTitle();\n  },\n  methods: {\n    setCustomColor(color, name = 'primary') {\n      const vars = createCssVars(color, this.theme, name);\n\n      for (const prop in vars) {\n        document.body.style.setProperty(prop, vars[prop]);\n      }\n    },\n\n    removeCustomColor(name = 'primary') {\n      const vars = createCssVars('rgb(0,0,0)', this.theme, name);\n\n      for (const prop in vars) {\n        document.body.style.removeProperty(prop);\n      }\n    },\n    setBodyClass() {\n      const body = document.getElementsByTagName('body')[0];\n      const cssClass = `overflow-hidden dashboard-body`;\n      let bodyClass = `theme-${ this.theme } ${ cssClass }`;\n\n      if ( this.brand ) {\n        try {\n          const brandMeta = require(`~shell/assets/brand/${ this.brand }/metadata.json`);\n\n          if (brandMeta?.hasStylesheet === 'true') {\n            bodyClass = `${ cssClass } ${ this.brand } theme-${ this.theme }`;\n          } else {\n            bodyClass = `theme-${ this.theme } overflow-hidden dashboard-body`;\n            this.$store.dispatch('prefs/setBrandStyle', this.theme === 'dark');\n          }\n        } catch {}\n      }\n      body.className = bodyClass;\n    }\n  }\n\n};\n","import { SETTING } from '@shell/config/settings';\nimport { MANAGEMENT } from '@shell/config/types';\n\nlet favIconSet = false;\n\nexport function haveSetFavIcon() {\n  return favIconSet;\n}\n\nexport function setFavIcon(store) {\n  const res = store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.FAVICON);\n  const brandSetting = store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.BRAND);\n  const link = findIconLink(document.head.getElementsByTagName('link'));\n\n  if (link) {\n    let brandImage;\n\n    if (brandSetting?.value === 'suse') {\n      brandImage = require('~shell/assets/brand/suse/favicon.png');\n    } else if (brandSetting?.value === 'csp') {\n      brandImage = require('~shell/assets/brand/csp/favicon.png');\n    } else if (brandSetting?.value === 'harvester') {\n      brandImage = require('~shell/assets/brand/harvester/favicon.png');\n    }\n\n    link.href = res?.value || brandImage || defaultFavIcon;\n    favIconSet = true;\n  }\n}\n\nfunction getCurrentFavIcon() {\n  const link = findIconLink(document.head.getElementsByTagName('link'));\n\n  return link ? link.href : '';\n}\n\nfunction findIconLink(links) {\n  for (let i = 0; i < links.length; i++) {\n    const link = links[i];\n\n    if (link.rel?.includes('icon')) {\n      return link;\n    }\n  }\n\n  return undefined;\n}\n\nconst defaultFavIcon = getCurrentFavIcon();\n","<script>\nimport Brand from '@shell/mixins/brand';\n\nexport default {\n  mixins: [Brand],\n  beforeMount() {\n    this.$store.commit('setError', { error: new Error('404: This page could not be found') });\n    this.$router.replace('/fail-whale');\n  }\n};\n</script>\n\n<template>\n  <div class=\"dashboard-root\" />\n</template>\n","import { render } from \"./404.vue?vue&type=template&id=89b1951c\"\nimport script from \"./404.vue?vue&type=script&lang=js\"\nexport * from \"./404.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../../../vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"names":["cspAdaptorApp","hasCspAdapter","apps","find","a","includes","metadata","name","fetch","this","$store","getters","APP","dispatch","type","e","haveAppsAndSettings","globalSettings","data","computed","loggedIn","SETTING","brand","setting","gs","id","BRAND","value","color","PRIMARY_COLOR","linkColor","LINK_COLOR","theme","THEME","cspAdapter","canCalcCspAdapter","watch","handler","neu","setCustomColor","removeCustomColor","immediate","setBodyClass","brandSetting","save","schema","url","linkFor","default","then","mounted","methods","vars","prop","document","body","style","setProperty","removeProperty","getElementsByTagName","cssClass","bodyClass","brandMeta","hasStylesheet","className","favIconSet","haveSetFavIcon","setFavIcon","store","res","FAVICON","link","findIconLink","head","brandImage","href","defaultFavIcon","getCurrentFavIcon","links","i","length","rel","class","mixins","beforeMount","commit","error","Error","$router","replace","__exports__","render"],"sourceRoot":""}